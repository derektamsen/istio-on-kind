apiVersion: v1
data:
  policy.rego: |
    package envoy.authz

    import input.attributes.request.http as http_request

    default allow = false

    token = {"valid": valid, "payload": payload} {
        [_, encoded] := split(http_request.headers.authorization, " ")
        # Test grabbing jwks - how does the cache work?
        # https://github.com/open-policy-agent/opa/issues/1753
        # First request fail,  does it need to download it and fail ? 
        jwks_request := http.send({"cache": true, "method": "GET", "url": "https://raw.githubusercontent.com/istio/istio/release-1.9/security/tools/jwt/samples/jwks.json"})
        valid := io.jwt.verify_rs256(encoded, jwks_request.raw_body)
        [_, payload, _] := io.jwt.decode(encoded)
    }

    allow {
        is_token_valid
        action_allowed
    }

    is_token_valid {
      token.valid
      token.payload["iss"] == "testing@secure.istio.io"
      now := time.now_ns() / 1000000000
      token.payload.nbf <= now
      now - 30 < token.payload.exp
    }

    action_allowed {
      startswith(http_request.path, base64url.decode(token.payload.path))
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: opa-policy
  namespace: dev
